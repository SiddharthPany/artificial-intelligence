# -*- coding: utf-8 -*-
"""Session6A-2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i_QGNYQIoGc5BPMYfNLp1YBI7apwsBMj

Changes made :


1.   kernel regularization L2
2.   Removed Dense layer
3.   Added BatchNormalization
4.   DropOut
5.   Changed the structure .

Previous accuracy : - 82.47 Current Accuracy : -  84.80.
"""

from keras import backend as K
import time
import matplotlib.pyplot as plt
import numpy as np
# % matplotlib inline
np.random.seed(2017) 
from keras.models import Sequential
from keras.layers.convolutional import Convolution2D, MaxPooling2D
from keras.layers import Activation, Flatten, Dense, Dropout
from keras.layers.normalization import BatchNormalization
from keras.utils import np_utils

from keras.datasets import cifar10
(train_features, train_labels), (test_features, test_labels) = cifar10.load_data()
num_train, img_channels, img_rows, img_cols =  train_features.shape
num_test, _, _, _ =  test_features.shape
num_classes = len(np.unique(train_labels))

class_names = ['airplane','automobile','bird','cat','deer',
               'dog','frog','horse','ship','truck']
fig = plt.figure(figsize=(8,3))
for i in range(num_classes):
    ax = fig.add_subplot(2, 5, 1 + i, xticks=[], yticks=[])
    idx = np.where(train_labels[:]==i)[0]
    features_idx = train_features[idx,::]
    img_num = np.random.randint(features_idx.shape[0])
    im = features_idx[img_num]
    ax.set_title(class_names[i])
    plt.imshow(im)
plt.show()

def plot_model_history(model_history):
    fig, axs = plt.subplots(1,2,figsize=(15,5))
    # summarize history for accuracy
    axs[0].plot(range(1,len(model_history.history['acc'])+1),model_history.history['acc'])
    axs[0].plot(range(1,len(model_history.history['val_acc'])+1),model_history.history['val_acc'])
    axs[0].set_title('Model Accuracy')
    axs[0].set_ylabel('Accuracy')
    axs[0].set_xlabel('Epoch')
    axs[0].set_xticks(np.arange(1,len(model_history.history['acc'])+1),len(model_history.history['acc'])/10)
    axs[0].legend(['train', 'val'], loc='best')
    # summarize history for loss
    axs[1].plot(range(1,len(model_history.history['loss'])+1),model_history.history['loss'])
    axs[1].plot(range(1,len(model_history.history['val_loss'])+1),model_history.history['val_loss'])
    axs[1].set_title('Model Loss')
    axs[1].set_ylabel('Loss')
    axs[1].set_xlabel('Epoch')
    axs[1].set_xticks(np.arange(1,len(model_history.history['loss'])+1),len(model_history.history['loss'])/10)
    axs[1].legend(['train', 'val'], loc='best')
    plt.show()
    
def accuracy(test_x, test_y, model):
    result = model.predict(test_x)
    predicted_class = np.argmax(result, axis=1)
    true_class = np.argmax(test_y, axis=1)
    num_correct = np.sum(predicted_class == true_class) 
    accuracy = float(num_correct)/result.shape[0]
    return (accuracy * 100)
  
train_features = train_features.astype('float32')/255
test_features = test_features.astype('float32')/255
# convert class labels to binary class labels
train_labels = np_utils.to_categorical(train_labels, num_classes)
test_labels = np_utils.to_categorical(test_labels, num_classes)

def lr_schedule(epoch):
    lrate = 0.001
    if epoch > 75:
        lrate = 0.0005
    if epoch > 100:
        lrate = 0.0003
    return lrate

from keras.regularizers import l2

weight_decay = 1e-4
# Define the model
model = Sequential()

# Convolution layer - 1
model.add(Convolution2D(16,(3, 3), padding="same", kernel_regularizer=l2(weight_decay), input_shape=(32, 32, 3)))  #  RF : 3  image-size = 32*3*3
model.add(BatchNormalization())
model.add(Activation('relu'))
model.add(Dropout(0.10))

model.add(Convolution2D(32,(3, 3), padding='same', kernel_regularizer=l2(weight_decay)))  # RF : 5
model.add(BatchNormalization())
model.add(Activation('relu'))
model.add(Dropout(0.10))

model.add(Convolution2D(64,(3, 3), padding='same', kernel_regularizer=l2(weight_decay)))   # RF : 7
model.add(BatchNormalization())
model.add(Activation('relu'))
model.add(Dropout(0.10))

model.add(Convolution2D(128,(3, 3), padding='same', kernel_regularizer=l2(weight_decay)))  # RF : 9
model.add(BatchNormalization())
model.add(Activation('relu'))
model.add(Dropout(0.10))

model.add(Convolution2D(256,(3, 3), padding='same', kernel_regularizer=l2(weight_decay)))  #  RF : 11
model.add(BatchNormalization())
model.add(Activation('relu'))
model.add(Dropout(0.10))

# Transition Layer - 1
model.add(Convolution2D(10,(1, 1), activation='relu', kernel_regularizer=l2(weight_decay)))
model.add(MaxPooling2D(pool_size=(2, 2)))   #   RF : 22  image-size = 16*3*3
model.add(Dropout(0.10))

# Convolution layer - 2
model.add(Convolution2D(16,(3, 3), padding="same", kernel_regularizer=l2(weight_decay), input_shape=(32, 32, 3)))  #  RF : 3  image-size = 32*3*3
model.add(BatchNormalization())
model.add(Activation('relu'))
model.add(Dropout(0.10))

model.add(Convolution2D(32,(3, 3), padding='same', kernel_regularizer=l2(weight_decay)))  # RF : 5
model.add(BatchNormalization())
model.add(Activation('relu'))
model.add(Dropout(0.10))

model.add(Convolution2D(64,(3, 3), padding='same', kernel_regularizer=l2(weight_decay)))   # RF : 7
model.add(BatchNormalization())
model.add(Activation('relu'))
model.add(Dropout(0.10))

model.add(Convolution2D(128,(3, 3), padding='same', kernel_regularizer=l2(weight_decay)))  # RF : 9
model.add(BatchNormalization())
model.add(Activation('relu'))
model.add(Dropout(0.10))

model.add(Convolution2D(256,(3, 3), padding='same', kernel_regularizer=l2(weight_decay)))  #  RF : 11
model.add(BatchNormalization())
model.add(Activation('relu'))
model.add(Dropout(0.10))

# Transition Layer - 2
model.add(Convolution2D(10,(1, 1), activation='relu', kernel_regularizer=l2(weight_decay)))
model.add(MaxPooling2D(pool_size=(2, 2)))   #   RF : 22  image-size = 8*3*3
model.add(Dropout(0.10))

# Convolution layer - 3
model.add(Convolution2D(16, 3, 3, kernel_regularizer=l2(weight_decay)))  #  RF : 24  image-size = 6
model.add(BatchNormalization())
model.add(Activation('relu'))
model.add(Dropout(0.10))

model.add(Convolution2D(32, 3, 3, kernel_regularizer=l2(weight_decay)))  # RF : 26   image-size = 4
model.add(BatchNormalization())
model.add(Activation('relu'))
model.add(Dropout(0.10))

# Transition Layer - 3
model.add(Convolution2D(10, 4, 4))

model.add(Flatten())
model.add(Activation('softmax'))

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

model.summary()

from keras.preprocessing.image import ImageDataGenerator
from keras.callbacks import LearningRateScheduler

datagen = ImageDataGenerator(zoom_range=0.0,
                             rotation_range=15,
                             width_shift_range=0.1,
                             height_shift_range=0.1,
                             horizontal_flip=True)

# train the model
start = time.time()
# Train the model
model_info = model.fit_generator(datagen.flow(train_features, train_labels, batch_size = 128),
                                 samples_per_epoch = train_features.shape[0], nb_epoch = 50, 
                                 validation_data = (test_features, test_labels), verbose=1,callbacks=[LearningRateScheduler(lr_schedule)])
end = time.time()
print ("Model took %0.2f seconds to train"%(end - start))
# plot model history
plot_model_history(model_info)
# compute test accuracy
print ("Accuracy on test data is: %0.2f"%accuracy(test_features, test_labels, model))